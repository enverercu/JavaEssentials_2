Immutable class means that once an object is created
, we cannot change its content. In Java, all the wrapper classes (like Integer, Boolean, Byte, Short) 
and String class is immutable

We can create our own immutable class as well.

The class must be declared as final (So that child classes can’t be created)
Data members in the class must be declared as final (So that we can’t change the value of it after object creation)
A parameterized constructor
Getter method for all the variables in it
No setters(To not have the option to change the value of the instance variable)

What is difference between String, StringBuffer and StringBuilder? When to use them?

StringBuffer and StringBuilder objects are mutable whereas String class objects are immutable.

StringBuffer --> can change value, class implementation is synchronized 
StringBuilder --> can change value, class is not synchronized.

StringBuffer is synchronized, StringBuilder is not. When some thing is synchronized, then multiple threads can access, and modify it with out any problem or side effect. StringBuffer is synchronized, so you can use it with multiple threads with out any problem.

StringBuilder is faster than StringBuffer because it's not synchronized. Using synchronized methods in a single thread is overkill.


Concatenation operator "+" is internally implemented by Java using either StringBuffer or StringBuilder.

If the Object value will not change in a scenario use String Class because a String object is immutable.

If the Object value can change and will only be modified from a single thread, use a StringBuilder because StringBuilder is unsynchronized(means faster).

If the Object value may change, and can be modified by multiple threads, use a StringBuffer because StringBuffer is thread safe(synchronized).


Why String class is final or immutable?
You can create substrings without copying. You just create a pointer into an existing base String guaranteed never to change. 
Immutability is the secret that makes Java substring implementation very fast.

Immutable objects are good fit for becoming Hashtable keys. If you change the value of any object that is used as a hash table key without removing it and re-adding it you will lose the object mapping.

Since String is immutable, inside each String is a char[] exactly the correct length. Unlike a StringBuilder there is no need for padding to allow for growth.





